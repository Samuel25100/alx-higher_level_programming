lazy_matrix_mul - multiplies 2 matrices by using the module NumPy
def lazy_matrix_mul(m_a, m_b)
=====================================================================
Importin module
	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Simple checking
	>>> m_a = [
	... [1, 2],
	... [3, 4],
	... ]
	>>> m_b = m_a
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[ 7 10]
	 [15 22]]

	>>> m_a = [[1, 2]]
	>>> m_b = [
	... [3, 4],
	... [5, 6]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[13 16]]


Using float point
	>>> m_a = [
	... [1.2, 5.5, 6.2],
	... [4.66, 12.3, -9.2]
	... ]
	>>> m_b = [
	... [5.0, 3.3],
	... [-2.9, 4.4],
	... [7.2, 4.4]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[ 34.69   55.44 ]
	 [-78.61   29.018]]

On wrong argument number
	>>> print(lazy_matrix_mul(m_a))
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Empty or no argument
	>>> print(lazy_matrix_mul())
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'



Using matrix that can't be multiply
	>>> m_a = [
	... [1, 2],
	... [3, 4],
	... ]
	>>> m_b = [
	... [1, 2],
	... [2, 3],
	... [4, 5]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)



	>>> print(lazy_matrix_mul([[]], [[5, 6], [7, 8]]))
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

Using matrix that is empty
	>>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[]]))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)


Using non-list
	>>> print(lazy_matrix_mul("not a list", [[1, 2]]))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead


	>>> print(lazy_matrix_mul([[1, 2]], "not a list"))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead


	>>> print(lazy_matrix_mul("not a list", "not a list"))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead


Using None as argument
	>>> print(lazy_matrix_mul(None, None))
	Traceback (most recent call last):
	TypeError: Object arrays are not currently supported


Using matrix that is not list of list
	>>> print(lazy_matrix_mul([1, 2], [[3, 4]]))
	Traceback (most recent call last):
	ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

	>>> print(lazy_matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]]))
	Traceback (most recent call last):
	TypeError: Object arrays are not currently supported

Using non-integer element
	>>> print(lazy_matrix_mul([[7, 4], [7, 1]], [[5, "a"], [4, 8]]))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum

Using non-rectangle matrix
	>>> m_a = [
	... [1, 2],
	... [3, 4]
	... ]
	>>> m_b = [
	... [1, 2],
	... [3, 4, 5]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.
